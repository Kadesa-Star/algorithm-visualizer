{"version":3,"sources":["algorithms/BubbleSort.js","algorithms/MergeSort.js","constants/sortingComplexities.js","components/Visualizer/Visualizer.js","algorithms/SelectionSort.js","algorithms/QuickSort.js","algorithms/InsertionSort.js","algorithms/HeapSort.js","components/UIControls/AlgorithmSelector.js","components/UIControls/ArraySizeControl.js","components/UIControls/SpeedControl.js","App.js","reportWebVitals.js","index.js"],"names":["mergeSort","arr","steps","sort","length","mid","Math","floor","merge","left","right","sorted","push","shift","slice","sortingComplexities","Bubble Sort","best","average","worst","space","Selection Sort","Merge Sort","Quick Sort","Insertion Sort","Heap Sort","Visualizer","_ref","algorithm","arraySize","speed","complexities","array","setArray","useState","isSorting","setIsSorting","resetArray","useCallback","newArray","i","randomIntFromInterval","useEffect","animateSortingSteps","sortingSteps","stepIndex","interval","setInterval","clearInterval","min","max","random","React","createElement","className","map","value","index","style","height","concat","width","key","onClick","visualizeAlgorithm","swapped","j","bubbleSort","minIndex","selectionSort","low","high","pivotIndex","partition","pivot","quickSort","insertionSort","heapify","n","largest","heapSort","disabled","getTimeComplexity","getSpaceComplexity","AlgorithmSelector","setAlgorithm","setComplexities","onChange","e","selectedAlgorithm","target","algo","ArraySizeControl","setArraySize","type","defaultValue","newSize","Number","SpeedControl","setSpeed","newSpeed","App","setKey","newAlgorithm","prevKey","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"0LAAO,MCAMA,EAAaC,IACxB,MAAMC,EAAQ,GAeRC,EAAQF,IACZ,GAAIA,EAAIG,QAAU,EAAG,OAAOH,EAC5B,MAAMI,EAAMC,KAAKC,MAAMN,EAAIG,OAAS,GAGpC,MAlBYI,EAACC,EAAMC,KACnB,IAAIC,EAAS,GACb,KAAOF,EAAKL,QAAUM,EAAMN,QACtBK,EAAK,GAAKC,EAAM,GAClBC,EAAOC,KAAKH,EAAKI,SAEjBF,EAAOC,KAAKF,EAAMG,SAEpBX,EAAMU,KAAK,IAAID,KAAWF,KAASC,IAErC,MAAO,IAAIC,KAAWF,KAASC,IAQxBF,CAFML,EAAKF,EAAIa,MAAM,EAAGT,IACjBF,EAAKF,EAAIa,MAAMT,MAK/B,OADAF,EAAKF,GACEC,GCzBIa,EAAsB,CACjCC,cAAe,CACbC,KAAM,OACNC,QAAS,SACTC,MAAO,SACPC,MAAO,QAETC,iBAAkB,CAChBJ,KAAM,SACNC,QAAS,SACTC,MAAO,SACPC,MAAO,QAETE,aAAc,CACZL,KAAM,aACNC,QAAS,aACTC,MAAO,aACPC,MAAO,QAETG,aAAc,CACZN,KAAM,aACNC,QAAS,aACTC,MAAO,SACPC,MAAO,YAETI,iBAAkB,CAChBP,KAAM,OACNC,QAAS,SACTC,MAAO,SACPC,MAAO,QAETK,YAAa,CACXR,KAAM,aACNC,QAAS,aACTC,MAAO,aACPC,MAAO,SCqFIM,MA/GIC,IAAmD,IAAlDC,UAAEA,EAASC,UAAEA,EAASC,MAAEA,EAAKC,aAAEA,GAAcJ,EAC/D,MAAOK,EAAOC,GAAYC,mBAAS,KAC5BC,EAAWC,GAAgBF,oBAAS,GAErCG,EAAaC,sBAAY,KAC7B,MAAMC,EAAW,GACjB,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAWW,IAC7BD,EAAS3B,KAAK6B,EAAsB,EAAG,MAEzCR,EAASM,GACTH,GAAa,IACZ,CAACP,IAEJa,oBAAU,KACRL,KACC,CAACR,EAAWQ,IAEfK,oBAAU,KACJd,GACFS,KAED,CAACT,EAAWS,IAEf,MA+BMM,EAAuBC,IAC3B,IAAIC,EAAY,EAChB,MAAMC,EAAWC,YAAY,KACvBF,EAAYD,EAAaxC,QAC3B6B,EAAS,IAAIW,EAAaC,KAC1BA,MAEAG,cAAcF,GACdV,GAAa,KAEdN,IAGCW,EAAwBA,CAACQ,EAAKC,IAC3B5C,KAAKC,MAAMD,KAAK6C,UAAYD,EAAMD,EAAM,IAAMA,EAevD,OACEG,IAAAC,cAAA,OAAKC,UAAU,cACbF,IAAAC,cAAA,OAAKC,UAAU,mBACZtB,EAAMuB,IAAI,CAACC,EAAOC,IACjBL,IAAAC,cAAA,OACEC,UAAU,YACVI,MAAO,CAAEC,OAAM,GAAAC,OAAKJ,EAAK,MAAMK,MAAK,GAAAD,OAAK,IAAM/B,EAAS,MACxDiC,IAAKL,MAIXL,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,UAAQU,QAxEaC,KACzB,GAAI7B,EAAW,OAGf,IAAIS,EACJ,OAFAR,GAAa,GAELR,GACN,IAAK,cACHgB,EHvCmB3C,KACzB,MAAMC,EAAQ,GACd,IAAI+D,EAEJ,IAAK,IAAIzB,EAAI,EAAGA,EAAIvC,EAAIG,OAAS,EAAGoC,IAAK,CACvCyB,GAAU,EACV,IAAK,IAAIC,EAAI,EAAGA,EAAIjE,EAAIG,OAAS,EAAIoC,EAAG0B,IAClCjE,EAAIiE,GAAKjE,EAAIiE,EAAI,MAClBjE,EAAIiE,GAAIjE,EAAIiE,EAAI,IAAM,CAACjE,EAAIiE,EAAI,GAAIjE,EAAIiE,IACxChE,EAAMU,KAAK,IAAIX,IACfgE,GAAU,GAGd,IAAKA,EAAS,MAGhB,OAAO/D,GGuBciE,CAAWnC,GAC1B,MACF,IAAK,iBACHY,EC1CsB3C,KAC5B,MAAMC,EAAQ,GAEd,IAAK,IAAIsC,EAAI,EAAGA,EAAIvC,EAAIG,OAAQoC,IAAK,CACnC,IAAI4B,EAAW5B,EACf,IAAK,IAAI0B,EAAI1B,EAAI,EAAG0B,EAAIjE,EAAIG,OAAQ8D,IAC9BjE,EAAIiE,GAAKjE,EAAImE,KACfA,EAAWF,GAGXE,IAAa5B,KACdvC,EAAIuC,GAAIvC,EAAImE,IAAa,CAACnE,EAAImE,GAAWnE,EAAIuC,IAC9CtC,EAAMU,KAAK,IAAIX,KAInB,OAAOC,GD0BcmE,CAAcrC,GAC7B,MACF,IAAK,aACHY,EAAe5C,EAAUgC,GACzB,MACF,IAAK,aACHY,EEhDkB3C,KACxB,MAAMC,EAAQ,GAERC,EAAOA,CAACF,EAAKqE,EAAKC,KACtB,GAAID,EAAMC,EAAM,CACd,MAAMC,EAAaC,EAAUxE,EAAKqE,EAAKC,GACvCpE,EAAKF,EAAKqE,EAAKE,EAAa,GAC5BrE,EAAKF,EAAKuE,EAAa,EAAGD,KAIxBE,EAAYA,CAACxE,EAAKqE,EAAKC,KAC3B,MAAMG,EAAQzE,EAAIsE,GAClB,IAAI/B,EAAI8B,EAAM,EACd,IAAK,IAAIJ,EAAII,EAAKJ,EAAIK,EAAML,IACtBjE,EAAIiE,GAAKQ,IACXlC,KACCvC,EAAIuC,GAAIvC,EAAIiE,IAAM,CAACjE,EAAIiE,GAAIjE,EAAIuC,IAChCtC,EAAMU,KAAK,IAAIX,KAKnB,OAFCA,EAAIuC,EAAI,GAAIvC,EAAIsE,IAAS,CAACtE,EAAIsE,GAAOtE,EAAIuC,EAAI,IAC9CtC,EAAMU,KAAK,IAAIX,IACRuC,EAAI,GAIb,OADArC,EAAKF,EAAK,EAAGA,EAAIG,OAAS,GACnBF,GFqBcyE,CAAU3C,GACzB,MACF,IAAK,iBACHY,EGnDsBZ,KAC5B,MAAM9B,EAAQ,GACd,IAAID,EAAM,IAAI+B,GACd,IAAK,IAAIQ,EAAI,EAAGA,EAAIvC,EAAIG,OAAQoC,IAAK,CACnC,IAAIsB,EAAM7D,EAAIuC,GACV0B,EAAI1B,EAAI,EACZ,KAAO0B,GAAK,GAAKjE,EAAIiE,GAAKJ,GACxB7D,EAAIiE,EAAI,GAAKjE,EAAIiE,GACjBhE,EAAMU,KAAK,IAAIX,IACfiE,GAAQ,EAEVjE,EAAIiE,EAAI,GAAKJ,EACb5D,EAAMU,KAAK,IAAIX,IAEjB,OAAOC,GHqCc0E,CAAc5C,GAC7B,MACF,IAAK,YACHY,EItDiBZ,KACvB,MAAM9B,EAAQ,GACd,IAAID,EAAM,IAAI+B,GAEd,MAAM6C,EAAUA,CAAC5E,EAAK6E,EAAGtC,KACvB,IAAIuC,EAAUvC,EACV/B,EAAO,EAAI+B,EAAI,EACf9B,EAAQ,EAAI8B,EAAI,EAEhB/B,EAAOqE,GAAK7E,EAAIQ,GAAQR,EAAI8E,KAAUA,EAAUtE,GAChDC,EAAQoE,GAAK7E,EAAIS,GAAST,EAAI8E,KAAUA,EAAUrE,GAElDqE,IAAYvC,KACbvC,EAAIuC,GAAIvC,EAAI8E,IAAY,CAAC9E,EAAI8E,GAAU9E,EAAIuC,IAC5CtC,EAAMU,KAAK,IAAIX,IACf4E,EAAQ5E,EAAK6E,EAAGC,KAIpB,IAAK,IAAIvC,EAAIlC,KAAKC,MAAMN,EAAIG,OAAS,GAAK,EAAGoC,GAAK,EAAGA,IAAKqC,EAAQ5E,EAAKA,EAAIG,OAAQoC,GACnF,IAAK,IAAIA,EAAIvC,EAAIG,OAAS,EAAGoC,EAAI,EAAGA,KACjCvC,EAAI,GAAIA,EAAIuC,IAAM,CAACvC,EAAIuC,GAAIvC,EAAI,IAChCC,EAAMU,KAAK,IAAIX,IACf4E,EAAQ5E,EAAKuC,EAAG,GAElB,OAAOtC,GJ6Bc8E,CAAShD,GACxB,MACF,QACE,OAGJW,EAAoBC,IA4CqBqC,SAAU9C,GAC5CA,EAAY,aAAe,uBAE9BiB,IAAAC,cAAA,UAAQU,QAAS1B,EAAY4C,SAAU9C,GAAW,UAIpDiB,IAAAC,cAAA,OAAKC,UAAU,0BACbF,IAAAC,cAAA,UAAI,0BACJD,IAAAC,cAAA,SAAG,oBAjCkBzB,KACzB,IAAKA,EAAW,MAAO,MACvB,MAAMG,EAAehB,EAAoBa,GACzC,aAAAgC,OAAc7B,EAAad,KAAI,UAAA2C,OAAS7B,EAAab,QAAO,UAAA0C,OAAS7B,EAAaZ,QA8BzD+D,CAAkBtD,IACvCwB,IAAAC,cAAA,SAAG,qBA5BmBzB,IACrBA,EACgBb,EAAoBa,GACrBR,OAAS,OAFN,MA2BG+D,CAAmBvD,OKvFlCwD,MAxBWzD,IAAuC,IAAtC0D,aAAEA,EAAYC,gBAAEA,GAAiB3D,EAS1D,OACEyB,IAAAC,cAAA,OAAKC,UAAU,sBACbF,IAAAC,cAAA,aAAO,qBACPD,IAAAC,cAAA,UAAQkC,SATUC,IACpB,MAAMC,EAAoBD,EAAEE,OAAOlC,MACnC6B,EAAaI,GACbH,EAAgBvE,EAAoB0E,IAAsB,MAOtDrC,IAAAC,cAAA,UAAQG,MAAM,IAAG,uBAZJ,CAAC,cAAe,iBAAkB,aAAc,aAAc,iBAAkB,aAajFD,IAAI,CAACoC,EAAMlC,IACrBL,IAAAC,cAAA,UAAQS,IAAKL,EAAOD,MAAOmC,GACxBA,OCGEC,MApBUjE,IAAsB,IAArBkE,aAAEA,GAAclE,EAMxC,OACEyB,IAAAC,cAAA,OAAKC,UAAU,sBACbF,IAAAC,cAAA,aAAO,eACPD,IAAAC,cAAA,SACEyC,KAAK,SACL7C,IAAI,IACJC,IAAI,KACJ6C,aAAa,KACbR,SAboBC,IACxB,MAAMQ,EAAU1F,KAAK4C,IAAI,EAAG5C,KAAK2C,IAAI,GAAIgD,OAAOT,EAAEE,OAAOlC,SACzDqC,EAAaG,QCiBFE,MApBMvE,IAAkB,IAAjBwE,SAAEA,GAAUxE,EAMhC,OACEyB,IAAAC,cAAA,OAAKC,UAAU,iBACbF,IAAAC,cAAA,aAAO,UACPD,IAAAC,cAAA,SACEyC,KAAK,QACL7C,IAAI,IACJC,IAAI,KACJ6C,aAAa,IACbR,SAbqBC,IACzB,MAAMY,EAAW9F,KAAK4C,IAAI,EAAG5C,KAAK2C,IAAI,GAAIgD,OAAOT,EAAEE,OAAOlC,SAC1D2C,EAAoB,IAAXC,QCsCEC,MApCHA,KACV,MAAOzE,EAAWyD,GAAgBnD,mBAAS,KACpCL,EAAWgE,GAAgB3D,mBAAS,KACpCJ,EAAOqE,GAAYjE,mBAAS,MAC5B4B,EAAKwC,GAAUpE,mBAAS,IACxBH,EAAcuD,GAAmBpD,mBAAS,IAkBjD,OACEkB,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAI,gCACJD,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAC+B,EAAiB,CAACC,aAnBMkB,IAC7BlB,EAAakB,GACbD,EAAQE,GAAYA,EAAU,IAiB8BlB,gBAAiBA,IACzElC,IAAAC,cAACuC,EAAgB,CAACC,aAdOG,IAC7BH,EAAaG,GACbM,EAAQE,GAAYA,EAAU,MAa1BpD,IAAAC,cAAC6C,EAAY,CAACC,SAVOC,IACzBD,EAAS,IAAOC,OAWdhD,IAAAC,cAAC3B,EAAU,CAACoC,IAAKA,EAAKlC,UAAWA,EAAWC,UAAWA,EAAWC,MAAOA,EAAOC,aAAcA,MC1BrF0E,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAApB,EAAA,GAAAqB,KAAAD,EAAAE,KAAA,UAAqBD,KAAKlF,IAAiD,IAAhDoF,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASxF,EACpEoF,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHpE,IAAAC,cAACD,IAAMqE,WAAU,KACfrE,IAAAC,cAACgD,EAAG,QAORI","file":"static/js/main.5b9d1f7c.chunk.js","sourcesContent":["export const bubbleSort = (arr) => {\n  const steps = [];\n  let swapped;\n\n  for (let i = 0; i < arr.length - 1; i++) {\n    swapped = false;\n    for (let j = 0; j < arr.length - 1 - i; j++) {\n      if (arr[j] > arr[j + 1]) {\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n        steps.push([...arr]); // Save the current state as a step\n        swapped = true;\n      }\n    }\n    if (!swapped) break;\n  }\n\n  return steps;\n}\n","export const mergeSort = (arr) => {\n  const steps = [];\n\n  const merge = (left, right) => {\n    let sorted = [];\n    while (left.length && right.length) {\n      if (left[0] < right[0]) {\n        sorted.push(left.shift());\n      } else {\n        sorted.push(right.shift());\n      }\n      steps.push([...sorted, ...left, ...right]);\n    }\n    return [...sorted, ...left, ...right];\n  };\n\n  const sort = (arr) => {\n    if (arr.length <= 1) return arr;\n    const mid = Math.floor(arr.length / 2);\n    const left = sort(arr.slice(0, mid));\n    const right = sort(arr.slice(mid));\n    return merge(left, right);\n  };\n\n  sort(arr);\n  return steps;\n};\n","export const sortingComplexities = {\n  'Bubble Sort': {\n    best: 'O(n)',\n    average: 'O(n^2)',\n    worst: 'O(n^2)',\n    space: 'O(1)', // Bubble Sort is an in-place algorithm\n  },\n  'Selection Sort': {\n    best: 'O(n^2)',\n    average: 'O(n^2)',\n    worst: 'O(n^2)',\n    space: 'O(1)', // Selection Sort is in-place\n  },\n  'Merge Sort': {\n    best: 'O(n log n)',\n    average: 'O(n log n)',\n    worst: 'O(n log n)',\n    space: 'O(n)', // Merge Sort requires additional space\n  },\n  'Quick Sort': {\n    best: 'O(n log n)',\n    average: 'O(n log n)',\n    worst: 'O(n^2)',\n    space: 'O(log n)', // Quick Sort uses recursive stack space\n  },\n  'Insertion Sort': {\n    best: 'O(n)',\n    average: 'O(n^2)',\n    worst: 'O(n^2)',\n    space: 'O(1)', // Insertion Sort is in-place\n  },\n  'Heap Sort': {\n    best: 'O(n log n)',\n    average: 'O(n log n)',\n    worst: 'O(n log n)',\n    space: 'O(1)', // Heap Sort is in-place\n  },\n};\n\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { bubbleSort } from '../../algorithms/BubbleSort';\nimport { selectionSort } from '../../algorithms/SelectionSort';\nimport { mergeSort } from '../../algorithms/MergeSort';\nimport { quickSort } from '../../algorithms/QuickSort';\nimport { insertionSort } from '../../algorithms/InsertionSort';\nimport { heapSort } from '../../algorithms/HeapSort';\nimport { sortingComplexities } from '../../constants/sortingComplexities';\n\nconst Visualizer = ({ algorithm, arraySize, speed, complexities }) => {\n  const [array, setArray] = useState([]);\n  const [isSorting, setIsSorting] = useState(false);\n\n  const resetArray = useCallback(() => {\n    const newArray = [];\n    for (let i = 0; i < arraySize; i++) {\n      newArray.push(randomIntFromInterval(5, 500));\n    }\n    setArray(newArray);\n    setIsSorting(false);  // Ensure sorting is stopped when resetting\n  }, [arraySize]);\n\n  useEffect(() => {\n    resetArray();\n  }, [arraySize, resetArray]);\n\n  useEffect(() => {\n    if (algorithm) {\n      resetArray();\n    }\n  }, [algorithm, resetArray]);\n\n  const visualizeAlgorithm = () => {\n    if (isSorting) return; // Prevent multiple sorts at once\n\n    setIsSorting(true);\n    let sortingSteps;\n    switch (algorithm) {\n      case 'Bubble Sort':\n        sortingSteps = bubbleSort(array);\n        break;\n      case 'Selection Sort':\n        sortingSteps = selectionSort(array);\n        break;\n      case 'Merge Sort':\n        sortingSteps = mergeSort(array);\n        break;\n      case 'Quick Sort':\n        sortingSteps = quickSort(array);\n        break;\n      case 'Insertion Sort':\n        sortingSteps = insertionSort(array);\n        break;\n      case 'Heap Sort':\n        sortingSteps = heapSort(array);\n        break;\n      default:\n        return;\n    }\n\n    animateSortingSteps(sortingSteps);\n  };\n\n  const animateSortingSteps = (sortingSteps) => {\n    let stepIndex = 0;\n    const interval = setInterval(() => {\n      if (stepIndex < sortingSteps.length) {\n        setArray([...sortingSteps[stepIndex]]);\n        stepIndex++;\n      } else {\n        clearInterval(interval);\n        setIsSorting(false);\n      }\n    }, speed);\n  };\n\n  const randomIntFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  const getTimeComplexity = (algorithm) => {\n    if (!algorithm) return 'N/A';\n    const complexities = sortingComplexities[algorithm];\n    return `BC: ${complexities.best}, AC: ${complexities.average}, WC: ${complexities.worst}`;\n  };\n\n  const getSpaceComplexity = (algorithm) => {\n    if (!algorithm) return 'N/A';\n    const complexities = sortingComplexities[algorithm];\n    return complexities.space || 'O(n)'; // Default to O(n) if space complexity not available\n  };\n\n  return (\n    <div className=\"visualizer\">\n      <div className=\"array-container\">\n        {array.map((value, index) => (\n          <div\n            className=\"array-bar\"\n            style={{ height: `${value}px`, width: `${100 / arraySize}%` }}\n            key={index}\n          ></div>\n        ))}\n      </div>\n      <div className=\"controls\">\n        <button onClick={visualizeAlgorithm} disabled={isSorting}>\n          {isSorting ? 'Sorting...' : 'Visualize Algorithm'}\n        </button>\n        <button onClick={resetArray} disabled={isSorting}>\n          Reset\n        </button>\n      </div>\n      <div className=\"algorithm-complexities\">\n        <h3>Algorithm Complexities</h3>\n        <p>Time Complexity: {getTimeComplexity(algorithm)}</p>\n        <p>Space Complexity: {getSpaceComplexity(algorithm)}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Visualizer;\n\n","export const selectionSort = (arr) => {\n  const steps = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    let minIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] < arr[minIndex]) {\n        minIndex = j;\n      }\n    }\n    if (minIndex !== i) {\n      [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];\n      steps.push([...arr]); // Save the current state as a step\n    }\n  }\n\n  return steps;\n};\n","export const quickSort = (arr) => {\n  const steps = [];\n\n  const sort = (arr, low, high) => {\n    if (low < high) {\n      const pivotIndex = partition(arr, low, high);\n      sort(arr, low, pivotIndex - 1);\n      sort(arr, pivotIndex + 1, high);\n    }\n  };\n\n  const partition = (arr, low, high) => {\n    const pivot = arr[high];\n    let i = low - 1;\n    for (let j = low; j < high; j++) {\n      if (arr[j] < pivot) {\n        i++;\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n        steps.push([...arr]); // Save the current state as a step\n      }\n    }\n    [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n    steps.push([...arr]); // Save the current state as a step\n    return i + 1;\n  };\n\n  sort(arr, 0, arr.length - 1);\n  return steps;\n};\n","export const insertionSort = (array) => {\n  const steps = [];\n  let arr = [...array];\n  for (let i = 1; i < arr.length; i++) {\n    let key = arr[i];\n    let j = i - 1;\n    while (j >= 0 && arr[j] > key) {\n      arr[j + 1] = arr[j];\n      steps.push([...arr]); // Capture step\n      j = j - 1;\n    }\n    arr[j + 1] = key;\n    steps.push([...arr]); // Capture step\n  }\n  return steps;\n};\n\n","export const heapSort = (array) => {\n  const steps = [];\n  let arr = [...array];\n\n  const heapify = (arr, n, i) => {\n    let largest = i;\n    let left = 2 * i + 1;\n    let right = 2 * i + 2;\n\n    if (left < n && arr[left] > arr[largest]) largest = left;\n    if (right < n && arr[right] > arr[largest]) largest = right;\n\n    if (largest !== i) {\n      [arr[i], arr[largest]] = [arr[largest], arr[i]];\n      steps.push([...arr]);\n      heapify(arr, n, largest);\n    }\n  };\n\n  for (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--) heapify(arr, arr.length, i);\n  for (let i = arr.length - 1; i > 0; i--) {\n    [arr[0], arr[i]] = [arr[i], arr[0]];\n    steps.push([...arr]);\n    heapify(arr, i, 0);\n  }\n  return steps;\n};\n\n","import React from 'react';\nimport { sortingComplexities } from '../../constants/sortingComplexities';\n\nconst AlgorithmSelector = ({ setAlgorithm, setComplexities }) => {\n  const algorithms = ['Bubble Sort', 'Selection Sort', 'Merge Sort', 'Quick Sort', 'Insertion Sort', 'Heap Sort'];\n\n  const handleChange = (e) => {\n    const selectedAlgorithm = e.target.value;\n    setAlgorithm(selectedAlgorithm);\n    setComplexities(sortingComplexities[selectedAlgorithm] || {}); // Set complexities for the selected algorithm\n  };\n\n  return (\n    <div className=\"algorithm-selector\">\n      <label>Choose Algorithm:</label>\n      <select onChange={handleChange}>\n        <option value=\"\">Select an Algorithm</option>\n        {algorithms.map((algo, index) => (\n          <option key={index} value={algo}>\n            {algo}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n};\n\nexport default AlgorithmSelector;\n\n","import React from 'react';\n\nconst ArraySizeControl = ({ setArraySize }) => {\n  const handleSizeChange = (e) => {\n    const newSize = Math.max(5, Math.min(50, Number(e.target.value))); // Ensure value is between 5 and 50\n    setArraySize(newSize);\n  };\n\n  return (\n    <div className=\"array-size-control\">\n      <label>Array Size:</label>\n      <input\n        type=\"number\"\n        min=\"5\"\n        max=\"50\"\n        defaultValue=\"20\"\n        onChange={handleSizeChange}\n      />\n    </div>\n  );\n};\n\nexport default ArraySizeControl;\n","import React from 'react';\n\nconst SpeedControl = ({ setSpeed }) => {\n  const handleSpeedChange = (e) => {\n    const newSpeed = Math.max(1, Math.min(10, Number(e.target.value))); // Ensure value is between 1 and 10\n    setSpeed(newSpeed * 100); // Scale for delay (e.g., 1 = 100ms delay, 10 = 1000ms delay)\n  };\n\n  return (\n    <div className=\"speed-control\">\n      <label>Speed:</label>\n      <input\n        type=\"range\"\n        min=\"1\"\n        max=\"10\"\n        defaultValue=\"5\"\n        onChange={handleSpeedChange}\n      />\n    </div>\n  );\n};\n\nexport default SpeedControl;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Visualizer from './components/Visualizer/Visualizer';\nimport AlgorithmSelector from './components/UIControls/AlgorithmSelector';\nimport ArraySizeControl from './components/UIControls/ArraySizeControl';\nimport SpeedControl from './components/UIControls/SpeedControl';\n\nconst App = () => {\n  const [algorithm, setAlgorithm] = useState('');\n  const [arraySize, setArraySize] = useState(20);\n  const [speed, setSpeed] = useState(500); // Initial speed in ms\n  const [key, setKey] = useState(0); // Key to force re-render\n  const [complexities, setComplexities] = useState({});\n\n  // Handle Algorithm Change\n  const handleAlgorithmChange = (newAlgorithm) => {\n    setAlgorithm(newAlgorithm);\n    setKey((prevKey) => prevKey + 1); // Force re-render of Visualizer\n  };\n\n  // Reset everything if array size or speed changes\n  const handleArraySizeChange = (newSize) => {\n    setArraySize(newSize);\n    setKey((prevKey) => prevKey + 1); // Force re-render of Visualizer\n  };\n\n  const handleSpeedChange = (newSpeed) => {\n    setSpeed(1000 / newSpeed); // Convert slider value to milliseconds\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Sorting Algorithm Visualizer</h1>\n      <div className=\"controls\">\n        <AlgorithmSelector setAlgorithm={handleAlgorithmChange} setComplexities={setComplexities} />\n        <ArraySizeControl setArraySize={handleArraySizeChange} />\n        <SpeedControl setSpeed={handleSpeedChange} />\n      </div>\n      <Visualizer key={key} algorithm={algorithm} arraySize={arraySize} speed={speed} complexities={complexities} />\n    </div>\n  );\n};\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}